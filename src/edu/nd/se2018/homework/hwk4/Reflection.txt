The most notable design decision I made was to not have Columbus' ship directly extend Observable. I opted to have two classes, ColumbusShip and PirateShip, that both extended Ship. I could then use polymorphic behavior with Ships to handle movement and collision detection. So, I just had to have another class that extended Observable (PirateNotifier) that was a member variable of ColumbusShip, and implement a few functions to interface with it.
I didn't do any of the stretch/extra features, but I designed my functions such that a new call to OceanMap's generateMap() function would have the effect of a reset button -- it would repopulate everything with a new random state.
The ships' sailing was mostly handled through OceanMap, because that's where I handled collision detection. Each ship knows where it is and, in the case of the PirateShips, where it wants to go, and requests OceanMap to see if it can sail there.
