To handle making the gates work with a new track, I generalized the gates in a way I'm pretty happy with. If a gate detects a train entering its zone, it tells the train that it has entered the station for that particular gate -- the trains keep a HashSet of gate names that they're in. The gates will only open if all the trains that have entered have left.

I more or less hard-coded the intersections, which isn't the best design and would be the first thing I would refactor if I were to work more on this project. Each car had a reference to the crossing and end roads, and check if it's at the mouth of the crossing road.
To handle the crossing, I overhauled the observer system. The car relationships are handled by the roads, which keep a queue of the cars on them. Whenever a car enters or leaves, it clears and re-makes the observer relationships based on where the cars are. There is stil the bug (from the provided code) where periodically a car seems to ignore the ones in front of it, but especially when changing roads this system works quite well.

My design would certainly not scale well. In particular, the intersections are hard-coded and only one-way streets are handled. For two-way streets you could probably kludge something together that's actually two one-way streets under the hood, but the intersection code is glaringly un-changable, and would certainly need to be redesigned if this were to be an actual project.
